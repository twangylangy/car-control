import serial
import cv2
import numpy as np
import math
import matplotlib.pyplot
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib


def canny(image):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    canny = cv2.Canny(blur, 50, 150)
    return canny


def region_of_interest(image):
    height = image.shape[0]
    polygons = np.array([
        [(200, height), (1100, height), (500, 250)]  # defines masked area (triangle)
    ])
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygons, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image


def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope, intercept))
    left_fit_average = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    #  print(left_fit_average, 'left')
    #  print(right_fit_average, 'right')
    left_line = make_coordinates(image, left_fit_average)
    right_line = make_coordinates(image, right_fit_average)
    centre_line = centre_get(image, left_line, right_line, left_fit_average, right_fit_average)
    return np.array([left_line, right_line, centre_line])


def centre_get(image, left, right, left_p, right_p):
    global theta
    global lane_position_difference
    global direction

    x1 = int((left[0] + right[0]) / 2)
    y1 = image.shape[0]
    A = np.array([[-1 * left_p[0], 1], [-1 * right_p[0], 1]])
    B = np.array([left_p[1], right_p[1]])
    inv_a = np.linalg.inv(A)
    X = np.dot(inv_a, B)
    x2 = int(X[0])
    y2 = int(X[1])
    theta = int(math.degrees(math.atan(abs(x1-x2)/abs(y2-y1))))  # : int with the : directly after theta
    lane_position_difference = (650 - x1)  # 650 number to be tweaked depending on centre of image

    if (x2 - x1) < 0:
        direction = -1
    if (x2 - x1) >= 0:
        direction = 1

    return np.array([x1, y1, x2, y2])


def make_coordinates(image, line_parameters):
    slope, intercept = line_parameters
    #  print(image.shape) Prints image size and channels
    y1 = image.shape[0]
    y2 = int(y1*(3/5))
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept) / slope)
    return np.array([x1, y1, x2, y2])


def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 10)
    return line_image


if __name__ == '__main__':
    while True:

        # Setting up the motor fuzzy logic system
        # antecedent/consequent objects for membership functions and universe variables
        fuzz_m_angle = ctrl.Antecedent(np.arange(0, 101, 1), 'fuzz_m_angle')
        fuzz_distance = ctrl.Antecedent(np.arange(0, 101, 2), 'fuzz_distance')
        fuzz_m_response = ctrl.Consequent(np.arange(0, 100, 1), 'fuzz_m_response')

        # manual fuzzy membership function setting
        fuzz_m_angle['minimal'] = fuzz.trimf(fuzz_m_angle.universe, [0, 0, 50])
        fuzz_m_angle['small'] = fuzz.trimf(fuzz_m_angle.universe, [0, 50, 100])
        fuzz_m_angle['large'] = fuzz.trimf(fuzz_m_angle.universe, [50, 100, 100])

        fuzz_distance['close'] = fuzz.trimf(fuzz_distance.universe, [0, 0, 50])
        fuzz_distance['middle'] = fuzz.trimf(fuzz_distance.universe, [0, 50, 100])
        fuzz_distance['far'] = fuzz.trimf(fuzz_distance.universe, [50, 100, 100])

        fuzz_m_response['slow'] = fuzz.trimf(fuzz_m_response.universe, [0, 0, 50])
        fuzz_m_response['medium'] = fuzz.trimf(fuzz_m_response.universe, [0, 50, 100])
        fuzz_m_response['fast'] = fuzz.trimf(fuzz_m_response.universe, [50, 100, 100])

        # viewing membership functions
        fuzz_m_angle['small'].view()
        fuzz_m_response['medium'].view()
        fuzz_distance['far'].view()

        # fuzzy control rules
        m_rule1 = ctrl.Rule(fuzz_m_angle['large'] & fuzz_distance['close'], fuzz_m_response['slow'])
        m_rule2 = ctrl.Rule(fuzz_m_angle['small'] & fuzz_distance['close'], fuzz_m_response['slow'])
        m_rule3 = ctrl.Rule(fuzz_m_angle['minimal'] & fuzz_distance['close'], fuzz_m_response['slow'])
        m_rule4 = ctrl.Rule(fuzz_m_angle['large'] & fuzz_distance['middle'], fuzz_m_response['slow'])
        m_rule5 = ctrl.Rule(fuzz_m_angle['small'] & fuzz_distance['middle'], fuzz_m_response['medium'])
        m_rule6 = ctrl.Rule(fuzz_m_angle['minimal'] & fuzz_distance['middle'], fuzz_m_response['medium'])
        m_rule7 = ctrl.Rule(fuzz_m_angle['large'] & fuzz_distance['far'], fuzz_m_response['medium'])
        m_rule8 = ctrl.Rule(fuzz_m_angle['small'] & fuzz_distance['far'], fuzz_m_response['fast'])
        m_rule9 = ctrl.Rule(fuzz_m_angle['minimal'] & fuzz_distance['far'], fuzz_m_response['fast'])

        # creating the control system
        motor_ctrl = ctrl.ControlSystem(
            [m_rule1, m_rule2, m_rule3, m_rule4, m_rule5, m_rule6, m_rule7, m_rule8, m_rule9])
        fuzzy_motor = ctrl.ControlSystemSimulation(motor_ctrl)

        # Setting up the motor fuzzy logic system
        # antecedent/consequent objects for membership functions and universe variables
        fuzz_s_angle = ctrl.Antecedent(np.arange(0, 101, 1), 'fuzz_s_angle')
        fuzz_lane = ctrl.Antecedent(np.arange(0, 101, 2), 'fuzz_lane')
        fuzz_s_response = ctrl.Consequent(np.arange(-1, 2, 1), 'fuzz_m_response')

        # manual fuzzy membership function setting
        fuzz_s_angle['left'] = fuzz.trimf(fuzz_s_angle.universe, [0, 0, 50])
        fuzz_s_angle['center'] = fuzz.trimf(fuzz_s_angle.universe, [0, 50, 100])
        fuzz_s_angle['right'] = fuzz.trimf(fuzz_s_angle.universe, [50, 100, 100])

        fuzz_lane['left'] = fuzz.trimf(fuzz_lane.universe, [0, 0, 50])
        fuzz_lane['center'] = fuzz.trimf(fuzz_lane.universe, [0, 50, 100])
        fuzz_lane['right'] = fuzz.trimf(fuzz_lane.universe, [50, 100, 100])

        fuzz_s_response['left'] = fuzz.trimf(fuzz_s_response.universe, [-1, -1, -0.5])
        fuzz_s_response['straight'] = fuzz.trimf(fuzz_s_response.universe, [-0.5, 0, 0.5])
        fuzz_s_response['right'] = fuzz.trimf(fuzz_s_response.universe, [0.5, 1, 1])

        # viewing membership functions
        fuzz_s_angle['right'].view()
        fuzz_s_response['left'].view()
        fuzz_lane['center'].view()

        # fuzzy control rules
        s_rule1 = ctrl.Rule(fuzz_s_angle['left'] & fuzz_lane['left'], fuzz_s_response['right'])
        s_rule2 = ctrl.Rule(fuzz_s_angle['center'] & fuzz_lane['left'], fuzz_s_response['right'])
        s_rule3 = ctrl.Rule(fuzz_s_angle['right'] & fuzz_lane['left'], fuzz_s_response['left'])
        s_rule4 = ctrl.Rule(fuzz_s_angle['left'] & fuzz_lane['center'], fuzz_s_response['right'])
        s_rule5 = ctrl.Rule(fuzz_s_angle['center'] & fuzz_lane['center'], fuzz_s_response['straight'])
        s_rule6 = ctrl.Rule(fuzz_s_angle['right'] & fuzz_lane['center'], fuzz_s_response['left'])
        s_rule7 = ctrl.Rule(fuzz_s_angle['left'] & fuzz_lane['right'], fuzz_s_response['right'])
        s_rule8 = ctrl.Rule(fuzz_s_angle['center'] & fuzz_lane['right'], fuzz_s_response['left'])
        s_rule9 = ctrl.Rule(fuzz_s_angle['right'] & fuzz_lane['right'], fuzz_s_response['left'])

        # creating the control system
        servo_ctrl = ctrl.ControlSystem(
            [s_rule1, s_rule2, s_rule3, s_rule4, s_rule5, s_rule6, s_rule7, s_rule8, s_rule9])
        fuzzy_servo = ctrl.ControlSystemSimulation(servo_ctrl)

        ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
        ser.flush()

        # Setting up the webcam for image capture
        cap = cv2.VideoCapture(0)
        cap.set(3, 1280)  # Width
        cap.set(4, 720)  # Height
        cap.set(10, 50)  # Brightness

        # Setting up QR code decoder
        detector = cv2.QRCodeDetector()

        while cap.isOpened():
            _, frame = cap.read()
            data, _, _ = detector.detectAndDecode(frame)

            # Lane detection logic (attempts)
            try:
                canny_image = canny(frame)
                cropped_image = region_of_interest(canny_image)
                lines = cv2.HoughLinesP(cropped_image, 2, np.pi / 180, 100, np.array([]), minLineLength=40,
                                        maxLineGap=5)
                if lines is not None:
                    for line in lines[0]:

                        averaged_lines = average_slope_intercept(frame, lines)
                        line_image = display_lines(frame, averaged_lines)
                        combined_image = cv2.addWeighted(frame, 0.8, line_image, 1, 1)

            except AttributeError:
                print('AttributeError')
            except NameError:
                print('NameError')
            except TypeError:
                print('TypeError')

            # Serial communications
            # Arduino --> Raspberry Pi
            arduino_input = ser.readline().decode('utf-8').rstrip()
            split = arduino_input.split()
            front_us_input = split[1]
            print(front_us_input)
            front_us_list = []
            front_us_list.append(front_us_input)
            if len(front_us_list) > 3:
                del front_us_list[0]
                front_us_average = np.averagefront_us_list
            else:
                front_us_average = 1000

            # Servo fuzzy logic inputs
            try:
                fuzzy_servo.input['fuzz_s_angle'] = (theta * direction)
            except NameError:
                theta = 0
                direction = 1
                fuzzy_servo.input['fuzz_s_angle'] = (theta * direction)
            try:    
                fuzzy_servo.input['fuzz_lane'] = lane_position_difference
            except NameError:
                lane_position_difference = 0
                fuzzy_servo.input['fuzz_lane'] = lane_position_difference
            # Servo fuzzy logic output
            fuzzy_servo.compute()

            # viewing the output
            print(fuzzy_servo.output['fuzz_m_response'])
            fuzz_s_response.view(sim=fuzzy_servo)
            # matplotlib.pyplot.show()
            fuzz_s_output = fuzzy_servo.output['fuzz_m_response']

            # Motor fuzzy logic inputs
            try:
                fuzzy_motor.input['fuzz_m_angle'] = theta
            except NameError:
                theta = 0
            fuzzy_motor.input['fuzz_distance'] = front_us_average
            # Motor fuzzy logic outputs
            fuzzy_motor.compute()

            # viewing the output
            print(fuzzy_motor.output['fuzz_m_response'])
            fuzz_m_response.view(sim=fuzzy_motor)
            # matplotlib.pyplot.show()
            fuzz_m_output = fuzzy_motor.output['fuzz_m_response']
            string_output_2 = str(fuzz_m_output)

            try:
                cv2.imshow('result', combined_image)
            except NameError:
                cv2.imshow('result', frame)

            # Raspberry Pi --> Arduino
            try:
                string = ''.join((string_output_1, ' ', string_output_2))
                ser.write(bytes(string, 'utf-8'))
            except NameError:
                string_output_1 = '1'
                string_output_2 = '3000'  # change later
                string = ''.join((string_output_1, ' ', string_output_2))
                ser.write(bytes(string, 'utf-8'))

            # Breaks loop when 'q' key is pressed
            if cv2.waitKey(1) == ord('q'):
                break
        cap.release()
        cv2.destroyAllWindows()
    
